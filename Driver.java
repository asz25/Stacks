/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author awdsa
 */
public class Driver {

    //Generates arraylist with Movie objects
    public static myArrayList<Movie> genMovies() {
        myArrayList<Movie> Movies = new myArrayList<>(5);

        Movies.add(new Movie("Princess Kaguya"));
        Movies.add(new Movie("Agent 47"));
        Movies.add(new Movie("Spooky Ougi"));
        Movies.add(new Movie("The Promise"));
        Movies.add(new Movie("Bark"));

        return Movies;
    }

    //Will create stack holding all tickets that will be sold per movie
    public static myStack<Ticket> genTick(Movie flick) {
        myStack<Ticket> result = new myStack<>(40);
        for (int i = 0; i < flick.getCap(); i++) {
            result.push(new Ticket(flick));
        }

        return result;
    }

    //Will display options available to customer, only movies with at least 1 ticket to sell, also has option of showing all movies, mainly for return tickets
    public static void menuOptions(myArrayList<Movie> movies, boolean buy) {
        if (buy) {
            System.out.println("Please select from the following available films: ");
            if (movies.get(0).getCap() > 0) {
                System.out.println("1." + movies.get(0));
            }
            if (movies.get(1).getCap() > 0) {
                System.out.println("2." + movies.get(1));
            }
            if (movies.get(2).getCap() > 0) {
                System.out.println("3." + movies.get(2));
            }
            if (movies.get(3).getCap() > 0) {
                System.out.println("4." + movies.get(3));
            }
            if (movies.get(4).getCap() > 0) {
                System.out.println("5." + movies.get(4) + "\n");
            }

        } else {
            System.out.println("Please select from the following films to return tickets to: ");
            System.out.println("1." + movies.get(0));
            System.out.println("2." + movies.get(1));
            System.out.println("3." + movies.get(2));
            System.out.println("4." + movies.get(3));
            System.out.println("5." + movies.get(4) + "\n");

        }
    }

    //Checks if there remains any tickets to be sold
    public static boolean isEmpty(myArrayList<Movie> movies) {
        for (int i = 0; i < movies.getSize(); i++) {
            if (movies.get(i).getCap() > 0) {
                return false;
            }
        }
        return true;
    }

    //Generates arraylist of stacks with tickets to be sold
    public static myArrayList<myStack<Ticket>> genTicketList(myArrayList<Movie> Movies) {
        myArrayList<myStack<Ticket>> result = new myArrayList<myStack<Ticket>>();
        myStack mov1 = genTick(Movies.get(0));
        myStack mov2 = genTick(Movies.get(1));
        myStack mov3 = genTick(Movies.get(2));
        myStack mov4 = genTick(Movies.get(3));
        myStack mov5 = genTick(Movies.get(4));

        result.add(mov1);
        result.add(mov2);
        result.add(mov3);
        result.add(mov4);
        result.add(mov5);

        return result;
    }

    //Method will pop number of tickets, num, from specified ticket stack, index
    public static void buyTickets(int index, int num, myArrayList<myStack<Ticket>> tickets) {
        int count = 0;
        Ticket holder = tickets.get(index).peek();

        for (int i = 0; i < num; i++) {
            holder = tickets.get(index).pop();
            if (holder.isFree()) {
                count++;
            }
        }
        System.out.println("\nYou have succesfully bought " + num + " tickets for " + holder.getName() + ", you got " + count + " coupons for free popcorn. Your total will be: $" + holder.getPrice() * num);
    }

    //Method will push number of tickets,num, into specified ticket stack, index
    public static void retTickets(int index, int num, myArrayList<myStack<Ticket>> tickets, myArrayList<Movie> movies) {
        for (int i = 0; i < num; i++) {
            tickets.get(i).push(new Ticket(movies.get(index)));
        }

        System.out.println("\nYou have succesfully returned " + num + " tickets for " + movies.get(index).getName());
    }

    public static void main(String args[]) {
        //Generates arraylist of movies and tickets, al information autogenerated
        myArrayList<Movie> Movies = genMovies();
        myArrayList<myStack<Ticket>> tickets = genTicketList(Movies);

        //Generates queue of customers, input for ticket system will be extracted from here
        myLinkedQueue consumers = new myLinkedQueue();
        for (int i = 0; i < 25; i++) {
            consumers.enqueue(new Consumer());
        }

        //Keeps track of how many customers were succesfully addressed
        int custServed = 0;

        //Will continue to work until 10 customers were served or if all tickets are sold
        while (custServed < 10 || isEmpty(Movies)) {

            //Current customer being addressed
            Consumer currCust = (Consumer) consumers.dequeue().data;
            System.out.println("Please choose from one of the following options: \n1.Purchase tickets\n2.Return tickets");

            //Boolean buy states if customer will buy tickets, otherwise he will return them
            boolean buy = currCust.isBuy();
            System.out.println("You wish to buy tickets: " + buy + "\n");

            if (buy) {

                menuOptions(Movies, buy);

                //Movie option customer desires
                int selection = currCust.getMov();
                System.out.println("You have selected option: " + selection);
                System.out.println("How many tickets would you like?");
                //Number of tickets customer desires
                int purchase = currCust.getTick();
                System.out.println("You wish to purchase " + purchase + " tickets");

                //Tells customer there are not enough tickets
                if (purchase > Movies.get(selection - 1).getCap()) {
                    System.out.println("\nI'm very sorry, but we do not have enough tickets.\n");
                    continue;
                } //Tells customer of limit of tickets  he can buy
                else if (purchase > 5) {
                    System.out.println("\nYou can only purchase up to 5 tickets");
                    continue;
                } //Removes tickets from ticket stacks accordingly
                else {
                    buyTickets(selection - 1, purchase, tickets);
                    Movies.get(selection - 1).dec(purchase);
                    custServed++;
                }

            } //Customer will return tickets
            else if (!buy) {

                //Displays all movies
                menuOptions(Movies, buy);
                //Movie customer will return tickets for
                int selection = currCust.getMov();
                System.out.println("You have selected option: " + selection);
                System.out.println("\nHow many do you wish to return?");
                //Number of tickets the customer will return
                int ret = currCust.getTick();
                System.out.println("You wish to return " + ret + " tickets");

                //Customer can only return up to 5 tickets
                if (ret > 5) {
                    System.out.println("\nYou can only return up to 5 tickets.");
                    continue;
                }

                //Otherwise, tickets will be added to their stacks accordingly
                retTickets(selection - 1, ret, tickets, Movies);
                Movies.get(selection - 1).inc(ret);
                custServed++;

            } else {
                System.out.println("\nPlease type a valid input from the options offered");
                continue;
            }

            //Prints how many customers were served appropriately
            System.out.println("Customers succesfully served: " + custServed);

        }

    }

}
